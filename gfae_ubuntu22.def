Bootstrap: docker
From: ubuntu:22.04

%files
    bashrc_conda /opt/etc/bashrc
    /ptmp/dchaimow/CAT12.8.2_r2166_R2017b_MCR_Linux.zip /opt/CAT12.8.2_r2166_R2017b_MCR_Linux.zip
%environment
    export PROMPT_COMMAND='. /opt/etc/bashrc; unset PROMPT_COMMAND'
    export PS1="\[\e[0;34m\]gfae> \[\e[0m\]"

    # CONDA
    export CONDA_DIR=/opt/conda
    export PATH=/opt/conda/bin:$PATH

    # FSL
    export FSLDIR=/opt/fsl
    export PATH=$FSLDIR/bin/:$PATH
    . $FSLDIR/etc/fslconf/fsl.sh

    # Freesurfer
    export FREESURFER_HOME=/opt/freesurfer
    export FS_LICENSE=~/license.txt
    export SUBJECTS_DIR=$FREESURFER_HOME/subjects
    . $FREESURFER_HOME/SetUpFreeSurfer.sh
    
    # Ciftify
    export PATH=$PATH:/opt/msm

    # AFNI
    export PATH="/opt/afni:$PATH"
    export AFNI_PLUGINPATH="/opt/afni"
    export R_LIBS=/opt/R

    # SPM12 with CAT12
    export SPM_HOME=/opt/spm12
    export MCR_HOME=/opt/mcr/v93
    export MCR_INHIBIT_CTF_LOCK=1
    export SPM_HTML_BROWSER=0

    # ANTS
    export PATH=/opt/ants/bin:$PATH

    # Firefox ESR
    export BROWSER=/usr/bin/firefox-esr

    # ITK-SNAP
    export PATH=/opt/itk-snap/bin:$PATH

    # LAYNII
    export PATH=/opt/laynii:$PATH

    # tools
    export PATH="/opt/dcm2niix:$PATH"
    export C3DPATH="/opt/convert3d"
    export PATH="/opt/convert3d/bin:$PATH"

    # Nighres
    export JCC_JDK=/usr/lib/jvm/java-1.11.0-openjdk-amd64

    # TCL/TK (for FSL, reset by Freesurfer)
    export FSLWISH=/usr/bin/wish
    export FSLTCLSH=/usr/bin/tclsh

%post -c /bin/bash
    chmod 755 /opt/etc/bashrc

    tmp=$(mktemp -d)
    
    export DEBIAN_FRONTEND=noninteractive
    apt-get update -qq
    apt-get install -y -q --no-install-recommends \
            sudo \
            wget \
            curl \
            ca-certificates \
            unzip \
            bzip2 \
            git \
            nano \
            binutils \
            mlocate \
            tree \
            bc \
            bash-completion \
            locales \
            locales-all

    # Build Nighres (before conda)
    apt install -y default-jdk build-essential python3-dev python3-pip python3-jcc
    export JCC_JDK=/usr/lib/jvm/java-1.11.0-openjdk-amd64

    cur_dir=$(pwd)
    git clone --depth 1 https://github.com/nighres/nighres /opt/nighres_build
    cd /opt/nighres_build
    ./build.sh
    cd ${cur_dir}

    # Condaforge 24.3.0
    export PATH=/opt/conda/bin:$PATH
    wget https://github.com/conda-forge/miniforge/releases/download/24.3.0-0/Miniforge3-24.3.0-0-Linux-x86_64.sh -P ${tmp}
    bash ${tmp}/Miniforge3-24.3.0-0-Linux-x86_64.sh -b -p /opt/conda
    conda update -yq -nbase conda
    conda config --system --set auto_update_conda false
    conda config --system --set show_channel_urls true
    # install; nibabel 3.2 because of ciftify issue
    conda install -y  --name base \
            "python" \
            "nipype" \
            "notebook" \
            "jupyterlab" \
            "numpy<2" \
            "scipy" \
            "nibabel=3.2" \
            "seaborn>=0.9.0" \
            "nilearn>=0.5.0" \
            "matplotlib>=2.2.2" \
            "pandas>=0.23.4" \
            "flask>=2.1.2" \
            "flask-cors>=3.0.10" \
            "pillow"

    # install built nighres (after conda)
    cd /opt/nighres_build
    # force nibabel 3.2.2 for ciftify
    sed -i 's/nibabel>=3.2.2/nibabel==3.2.2/g' setup.cfg 
    pip install .
    cd ${cur_dir}

    # gradunwarp   
    git clone https://github.com/Washington-University/gradunwarp.git ${tmp}/gradunwarp
    python -m pip install --no-cache-dir -r ${tmp}/gradunwarp/requirements.txt &&
    python -m pip install --no-cache-dir ${tmp}/gradunwarp

    # FSL
    apt-get install -y \
      file            \
      dc              \
      mesa-utils      \
      pulseaudio      \
      libquadmath0    \
      libgtk2.0-0     \
      firefox         \
      libgomp1 \
      tcl \
      tk

    curl -fsSL https://fsl.fmrib.ox.ac.uk/fsldownloads/fslconda/releases/fslinstaller.py | \
        python - -d /opt/fsl -V 6.0.7.13 --miniconda /opt/conda --extras_dir /opt/conda/envs
    
    # pydeface (requires FSL)
    apt-get install -y \
        build-essential
    python -m pip install pydeface

    # Freesurfer
    wget https://surfer.nmr.mgh.harvard.edu/pub/dist/freesurfer/7.3.2/freesurfer_ubuntu22-7.3.2_amd64.deb -P ${tmp} \
        --no-check-certificate
    apt install ${tmp}/freesurfer_ubuntu22-7.3.2_amd64.deb -y
    ln -s /usr/local/freesurfer/7.3.2 /opt/freesurfer 

    # Connectome Workbench
    apt-get install -y \
            gnupg2
    wget -O- http://neuro.debian.net/lists/jammy.de-fzj.full | tee /etc/apt/sources.list.d/neurodebian.sources.list
    apt-key adv --recv-keys --keyserver hkps://keyserver.ubuntu.com 0xA5D32F012649A5A9
    apt-get update
    apt-get install connectome-workbench -y
    
    # Ciftify (requires workbench, fsl, freesurfer, conda)
    # msm
    apt-get install -y \
        libopenblas-dev
        
    mkdir -p /opt/msm
    wget https://github.com/ecr05/MSM_HOCR/releases/download/v3.0FSL/msm_ubuntu_v3 -P /opt/fsl/bin
    # replace fsl msm
    mv /opt/fsl/bin/msm /opt/fsl/bin/msm_fsl
    mv /opt/fsl/bin/msm_ubuntu_v3 /opt/fsl/bin/msm
    chmod +x /opt/fsl/bin/msm

    pip install ciftify

    # AFNI
    apt-get install software-properties-common -y
    add-apt-repository universe
    apt-get install -y \
        tcsh xfonts-base libssl-dev       \
        python-is-python3                 \
        python3-matplotlib python3-numpy  \
        python3-flask python3-flask-cors  \
        python3-pil                       \
        gsl-bin netpbm gnome-tweaks       \
        libjpeg62 xvfb xterm vim curl     \
        gedit evince eog                  \
        libglu1-mesa-dev libglw1-mesa     \
        libxm4 build-essential            \
        libcurl4-openssl-dev libxml2-dev  \
        libgfortran-11-dev libgomp1       \
        gnome-terminal nautilus           \
        firefox xfonts-100dpi             \
        r-base-dev cmake                  \
        libgdal-dev libopenblas-dev       \
        libnode-dev libudunits2-dev bc

    # update R
    apt-key adv --keyserver keyserver.ubuntu.com --recv-keys E298A3A825C0D65DFD57CBB651716619E084DAB9
    add-apt-repository 'deb https://cloud.r-project.org/bin/linux/ubuntu jammy-cran40/'
    apt install r-base-dev -y
    R --version

    # Make a symbolic link for the specific version of GSL included in this version of Ubuntu.
    ln -s /usr/lib/x86_64-linux-gnu/libgsl.so.27 /usr/lib/x86_64-linux-gnu/libgsl.so.19

    wget https://afni.nimh.nih.gov/pub/dist/bin/misc/@update.afni.binaries -P ${tmp}
    tcsh ${tmp}/@update.afni.binaries -package linux_ubuntu_16_64 -bindir /opt/afni -do_extras    

    export PATH="/opt/afni:$PATH"
    export R_LIBS=/opt/R
    mkdir  $R_LIBS
    
    . /opt/conda/etc/profile.d/conda.sh
    conda deactivate
    rPkgsInstall -pkgs ALL

    # ANTs
    wget https://github.com/ANTsX/ANTs/releases/download/v2.5.3/ants-2.5.3-ubuntu-22.04-X64-gcc.zip -P ${tmp}
    unzip -q ${tmp}/ants-2.5.3-ubuntu-22.04-X64-gcc.zip -d /opt/
    mv /opt/ants-2.5.3 /opt/ants

    # firefox ESR
    apt-get install -y \
        software-properties-common \
        libpci-dev \
        libegl-mesa0 \
        libgl1-mesa-dev

    apt remove firefox -y
    add-apt-repository ppa:mozillateam/ppa
    apt-get update -y
    apt-get install firefox-esr -y

    # Install ITK-SNAP
    apt-get install -y -q \
        libqt5gui5 \
        libopengl0 
            
    mkdir -p /opt/itk-snap
    curl -fsSL --retry 5 \
        https://deac-ams.dl.sourceforge.net/project/itk-snap/itk-snap/4.0.2/itksnap-4.0.2-Linux-gcc64.tar.gz \
        | tar -xz --strip-components=1 -C /opt/itk-snap
    find /opt/itk-snap/ -name '*.so.*' | xargs strip --remove-section=.note.ABI-tag

    # LAYNII
    wget https://github.com/layerfMRI/LAYNII/releases/download/v2.7.0/LayNii_v2.7.0_Linux64.zip -P ${tmp}
    unzip -q ${tmp}/LayNii_v2.7.0_Linux64.zip -d /opt/laynii

    # GNU parallel
    apt-get install -y -q parallel

    # emacs and vim
    apt-get install -y -q emacs vim

    # jq
    curl -fsSL --output /usr/local/bin/jq https://github.com/jqlang/jq/releases/download/jq-1.7.1/jq-linux-amd64
    chmod +x /usr/local/bin/jq

    # dcm2niix
    mkdir -p /opt/dcm2niix
    cd /opt/dcm2niix
    curl -fsSL -o dcm2niix.zip https://github.com/rordenlab/dcm2niix/releases/download/v1.0.20240202/dcm2niix_lnx.zip
    unzip dcm2niix.zip
    rm dcm2niix.zip
    chmod +x dcm2niix

    # convert3d
    mkdir -p /opt/convert3d
    curl -fsSL https://sourceforge.net/projects/c3d/files/c3d/1.0.0/c3d-1.0.0-Linux-x86_64.tar.gz/download \
    | tar -xz -C /opt/convert3d --strip-components 1

    # Matlab Runtime
    apt-get install -y -q --no-install-recommends \
            libncurses5 \
            xorg
            
    mkdir -p opt/mcr
    wget https://ssd.mathworks.com/supportfiles/downloads/R2017b/deployment_files/R2017b/installers/glnxa64/MCR_R2017b_glnxa64_installer.zip -P ${tmp}
    unzip -q ${tmp}/MCR_R2017b_glnxa64_installer.zip -d ${tmp}
    ${tmp}/install -mode silent -agreeToLicense yes -destinationFolder /opt/mcr
    mv /opt/mcr/v93/bin/glnxa64/libfreetype.so.6.11.1 /opt/mcr/v93/bin/glnxa64/libfreetype.so.6.11.1.bak

    # SPM12 with CAT12
    wget https://www.neuro.uni-jena.de/cat12/CAT12.8.2_r2166_R2017b_MCR_Linux.zip -P ${tmp}
    unzip -q ${tmp}/CAT12.8.2_r2166_R2017b_MCR_Linux.zip -d ${tmp}
    mv ${tmp}/CAT12.8.2_r2166_R2017b_MCR_Linux /opt/spm12
    chmod +x /opt/spm12/run_spm12.sh /opt/spm12/spm12 
    # single call (to build spm12.ctf while we have write permissions)
    /opt/spm12/run_spm12.sh /opt/mcr/v93 function exit
    # set up single spm executable
    printf '#!/bin/bash\n/opt/spm12/run_spm12.sh /opt/mcr/v93 "$@"' > \
            /opt/spm12/spm12_mcr/bin/spm12
    chmod +x /opt/spm12/spm12_mcr/bin/spm12
    ln -s /opt/spm12/spm12_mcr/bin/spm12 /usr/local/bin/spm12

    # Conda clean up
    sync && conda clean --all --yes && sync
    rm -rf ~/.cache/pip/*

    # Clean up
    rm -rf /var/lib/apt/lists/*
    rm -rf ${tmp}
